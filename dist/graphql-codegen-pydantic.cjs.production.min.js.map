{"version":3,"file":"graphql-codegen-pydantic.cjs.production.min.js","sources":["../src/visitor.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable lines-between-class-members */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable react/no-this-in-sfc */\nimport {\n  BaseVisitor,\n\n  buildScalars,\n  indent, ParsedConfig\n} from '@graphql-codegen/visitor-plugin-common';\nimport { DepGraph } from 'dependency-graph';\nimport {\n  DocumentNode,\n\n  EnumTypeDefinitionNode, FieldDefinitionNode, GraphQLSchema,\n\n\n\n\n\n\n\n  InputObjectTypeDefinitionNode,\n  InputValueDefinitionNode, InterfaceTypeDefinitionNode, ListTypeNode, NamedTypeNode,\n\n\n\n\n\n  NameNode, NonNullTypeNode,\n\n\n  ObjectTypeDefinitionNode,\n\n  UnionTypeDefinitionNode\n} from 'graphql';\nimport { PydanticPluginRawConfig } from './config';\n\n\nexport const PYTHON_SCALARS = {\n  ID: 'str',\n  String: 'str',\n  Boolean: 'bool',\n  Int: 'int',\n  Float: 'float',\n  AWSDateTime: 'datetime',\n};\n\nconst PYTHON_RESERVED = ['from'];\nconst PYDANTIC_MODEL_RESERVED = ['copy'];\nconst RESERVED = PYTHON_RESERVED.concat(PYDANTIC_MODEL_RESERVED);\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PydanticPluginParsedConfig extends ParsedConfig {\n  /* intentionally empty for now */\n}\n\nexport class PydanticVisitor extends BaseVisitor<\n  PydanticPluginRawConfig,\n  PydanticPluginParsedConfig\n> {\n  private addOptionalImport = false;\n  private addAnyImport = false;\n  private addListImport = false;\n  private addUnionImport = false;\n  private addEnumImport = false;\n  private addFieldImport = false;\n  private addDatetimeImport = false;\n\n  private graph = new DepGraph({\n    circular: false,\n  });\n\n  constructor(\n    rawConfig: PydanticPluginRawConfig,\n    private schema: GraphQLSchema,\n  ) {\n    super(rawConfig, {\n      // enumValues: rawConfig.enumValues || {},\n      // listType: rawConfig.listType || 'List',\n      // package: rawConfig.package || defaultPackageName,\n      scalars: buildScalars(schema, {}, PYTHON_SCALARS),\n    });\n    throw new Error(\"haha\")\n  }\n\n  public getImports(): string {\n    throw new Error(\"haha\")\n    const typing = [];\n    const pydantic = ['BaseModel'];\n    const datetime = [];\n\n    if (this.addAnyImport) {\n      typing.push(`Any`);\n    }\n\n    if (this.addOptionalImport) {\n      typing.push(`Optional`);\n    }\n\n    if (this.addListImport) {\n      typing.push(`List`);\n    }\n\n    if (this.addUnionImport) {\n      typing.push(`Union`);\n    }\n\n    if (this.addFieldImport) {\n      pydantic.push(`Field`);\n    }\n\n    if (this.addDatetimeImport) {\n      datetime.push(`datetime`);\n    }\n\n    const enumInput = this.addEnumImport ? 'from enum import Enum' : '';\n\n    const typingImport = typing.length\n      ? `from typing import ${typing.join(', ')}`\n      : '';\n\n    const pydanticImport = pydantic.length\n      ? `from pydantic import ${pydantic.join(', ')}`\n      : '';\n\n    const datetimeImport = datetime.length\n        ? `from datetime import ${datetime.join(', ')}`\n        : '';\n\n    return [enumInput, typingImport, pydanticImport, datetimeImport].filter(i => i).join('\\n');\n  }\n\n  protected canAddGraphNode(id: string): boolean {\n    if (Object.values(this.scalars).includes(id) || id === 'Any') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected upsertGraphNode(id: string) {\n    if (this.canAddGraphNode(id) && !this.graph.hasNode(id)) {\n      this.graph.addNode(id);\n    }\n  }\n\n  protected addGraphNodeDeps(id: string, ids: string[]) {\n    if (!this.canAddGraphNode(id)) {\n      return;\n    }\n\n    this.upsertGraphNode(id);\n\n    ids.forEach((i: string) => {\n      if (!this.canAddGraphNode(i)) {\n        return;\n      }\n\n      this.upsertGraphNode(i);\n\n      this.graph.addDependency(id, i);\n    });\n  }\n\n  protected clearOptional(str: string): string {\n    if (str.startsWith('Optional[')) {\n      return str.replace(/Optional\\[(.*?)\\]$/, '$1');\n    }\n\n    return str;\n  }\n\n  Name(node: NameNode) {\n    return node.value;\n  }\n\n  NamedType(node: NamedTypeNode) {\n    const { name } = node as any;\n\n    // Scalars\n    if (Object.keys(this.scalars).includes(name)) {\n      const id = this.scalars[name];\n\n      if (id === 'datetime') {\n        this.addDatetimeImport = true;\n      }\n\n      // Special case for any\n      if (id === 'any') {\n        this.addAnyImport = true;\n        return {\n          id: 'Any',\n          source: 'Any',\n        };\n      }\n\n      this.addOptionalImport = true;\n      return {\n        id,\n        source: `Optional[${id}]`,\n      };\n    }\n\n    // Defined\n    this.addOptionalImport = true;\n    return {\n      id: name,\n      source: `Optional[\"${name}\"]`,\n    };\n  }\n\n  ListType(node: ListTypeNode) {\n    this.addListImport = true;\n    this.addOptionalImport = true;\n\n    const { type } = node as any;\n\n    return {\n      id: type.id,\n      source: `Optional[List[${type.source}]]`,\n    };\n  }\n\n  NonNullType(node: NonNullTypeNode) {\n    const { type } = node as any;\n\n    return {\n      id: type.id,\n      source: this.clearOptional(type.source),\n    };\n  }\n\n  protected visitFieldOrInputDefinition(node: any) {\n    const argName = node.name as any;\n\n    const { type, directives } = node as any;\n\n    // @todo handle de-duplicating if snakeCase will break\n    // eg aaaa and AAAA field\n\n    // Handle deprecated\n    const ds = directives.map((d: any) => d.name);\n    if (ds.includes('deprecated')) {\n      return null;\n    }\n\n    // Need to alias some field names\n    // Otherwise pydantic throws\n    if (RESERVED.includes(argName)) {\n      this.addFieldImport = true;\n      return {\n        id: type.id,\n        source: indent(\n          `${argName}_: ${type.source} = Field(None, alias=\"${argName}\")`,\n          2,\n        ),\n      };\n    }\n\n    return {\n      id: type.id,\n      source: indent(`${argName}: ${type.source}`, 2),\n    };\n  }\n\n  FieldDefinition(node: FieldDefinitionNode) {\n    return this.visitFieldOrInputDefinition(node);\n  }\n\n  InputValueDefinition(node: InputValueDefinitionNode) {\n    return this.visitFieldOrInputDefinition(node);\n  }\n\n  EnumTypeDefinition(node: EnumTypeDefinitionNode) {\n    this.addEnumImport = true;\n\n    const { name, values } = node as any;\n\n    const val = values\n      .map((v: any) => indent(`${v.name} = \"${v.name}\"`, 2))\n      .join('\\n');\n    const source = `class ${name}(str, Enum):\\n${val}`;\n\n    this.upsertGraphNode(name);\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  UnionTypeDefinition(node: UnionTypeDefinitionNode) {\n    this.addUnionImport = true;\n\n    const { name, types } = node as any;\n\n    const unionTypes = (types ?? []).map((t: any) =>\n      this.clearOptional(t.source),\n    );\n\n    this.addGraphNodeDeps(\n      name,\n      types.map((t: any) => t.id),\n    );\n\n    return {\n      id: name,\n      source: `${name} = Union[${unionTypes.join(', ')}]`,\n    };\n  }\n\n  InterfaceTypeDefinition(node: InterfaceTypeDefinitionNode) {\n    const { name, fields: rawFields } = node as any;\n\n    const fields = rawFields.filter((f: any) => f);\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const source = `class ${name}(BaseModel):\\n${args}`;\n\n    this.addGraphNodeDeps(\n      name,\n      fields.map((f: any) => f.id),\n    );\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  ObjectTypeDefinition(node: ObjectTypeDefinitionNode) {\n    const { name, fields: rawFields, interfaces: rawInterfaces } = node as any;\n\n    rawFields.push({id: \"int\", source: indent(\"_version: int\", 2)})\n    const fields = rawFields.filter((f: any) => f);\n\n    const interfaces = rawInterfaces.map((n: any) =>\n      this.clearOptional(n.source).replace(/'/g, ''),\n    );\n\n    const impl = interfaces.length ? interfaces.join(', ') : 'BaseModel';\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const methods = indent(\"def __str__(self):\", 2)\n        + \"\\n\"\n        + indent(\"return self.value\", 4);\n    const source = `class ${name}(${impl}):\\n${args}\\n\\n${methods}`;\n\n    if (interfaces.length) {\n      this.addGraphNodeDeps(name, interfaces);\n    } else {\n      this.upsertGraphNode(name);\n    }\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  InputObjectTypeDefinition(node: InputObjectTypeDefinitionNode) {\n    const { name, fields: rawFields } = node as any;\n\n    const fields = rawFields.filter((f: any) => f);\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const source = `class ${name}(BaseModel):\\n${args}`;\n\n    this.upsertGraphNode(name);\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  Document(node: DocumentNode) {\n    const { definitions } = node as any;\n\n    const nodesInOrder = this.graph.overallOrder();\n\n    return nodesInOrder\n      .map((n: any) => definitions.find((d: any) => d.id === n)?.source || '')\n      .join('\\n\\n\\n');\n  }\n}\n","import { parse, GraphQLSchema, printSchema, visit } from 'graphql';\nimport { PluginFunction, Types } from '@graphql-codegen/plugin-helpers';\n\nimport { PydanticVisitor } from './visitor';\nimport { PydanticPluginRawConfig } from './config';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const plugin: PluginFunction<PydanticPluginRawConfig> = async (\n  schema: GraphQLSchema,\n  documents: Types.DocumentFile[],\n  config: PydanticPluginRawConfig,\n  info,\n): Promise<string> => {\n  const visitor = new PydanticVisitor(config, schema);\n  const printedSchema = printSchema(schema);\n  const astNode = parse(printedSchema);\n\n  const visitorResult = visit(astNode, { leave: visitor as any });\n  const imports = visitor.getImports();\n\n  return `${imports}\\n\\n\\n${visitorResult}\\n`;\n};\n"],"names":["PYTHON_SCALARS","ID","String","Boolean","Int","Float","AWSDateTime","RESERVED","concat","PydanticVisitor","BaseVisitor","constructor","rawConfig","schema","scalars","buildScalars","DepGraph","circular","Error","getImports","canAddGraphNode","id","Object","values","this","includes","upsertGraphNode","graph","hasNode","addNode","addGraphNodeDeps","ids","forEach","i","addDependency","clearOptional","str","startsWith","replace","Name","node","value","NamedType","name","keys","addDatetimeImport","addAnyImport","source","addOptionalImport","ListType","addListImport","type","NonNullType","visitFieldOrInputDefinition","argName","directives","map","d","addFieldImport","indent","FieldDefinition","InputValueDefinition","EnumTypeDefinition","addEnumImport","v","join","UnionTypeDefinition","addUnionImport","types","unionTypes","t","InterfaceTypeDefinition","fields","rawFields","filter","f","ObjectTypeDefinition","interfaces","rawInterfaces","push","n","length","InputObjectTypeDefinition","Document","definitions","overallOrder","find","documents","config","info","visitor","printedSchema","printSchema","astNode","parse","visitorResult","visit","leave","imports"],"mappings":"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"}