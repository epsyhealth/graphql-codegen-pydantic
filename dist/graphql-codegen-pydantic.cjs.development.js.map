{"version":3,"file":"graphql-codegen-pydantic.cjs.development.js","sources":["../src/visitor.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable lines-between-class-members */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable react/no-this-in-sfc */\nimport {\n  BaseVisitor,\n\n  buildScalars,\n  indent, ParsedConfig\n} from '@graphql-codegen/visitor-plugin-common';\nimport { DepGraph } from 'dependency-graph';\nimport {\n  DocumentNode,\n\n  EnumTypeDefinitionNode, FieldDefinitionNode, GraphQLSchema,\n\n\n\n\n\n\n\n  InputObjectTypeDefinitionNode,\n  InputValueDefinitionNode, InterfaceTypeDefinitionNode, ListTypeNode, NamedTypeNode,\n\n\n\n\n\n  NameNode, NonNullTypeNode,\n\n\n  ObjectTypeDefinitionNode,\n\n  UnionTypeDefinitionNode\n} from 'graphql';\nimport { PydanticPluginRawConfig } from './config';\n\n\nexport const PYTHON_SCALARS = {\n  ID: 'str',\n  String: 'str',\n  Boolean: 'bool',\n  Int: 'int',\n  Float: 'float',\n  AWSDateTime: 'datetime',\n};\n\nconst PYTHON_RESERVED = ['from'];\nconst PYDANTIC_MODEL_RESERVED = ['copy'];\nconst RESERVED = PYTHON_RESERVED.concat(PYDANTIC_MODEL_RESERVED);\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PydanticPluginParsedConfig extends ParsedConfig {\n  /* intentionally empty for now */\n}\n\nexport class PydanticVisitor extends BaseVisitor<\n  PydanticPluginRawConfig,\n  PydanticPluginParsedConfig\n> {\n  private addOptionalImport = false;\n  private addAnyImport = false;\n  private addListImport = false;\n  private addUnionImport = false;\n  private addEnumImport = false;\n  private addFieldImport = false;\n  private addDatetimeImport = false;\n\n  private graph = new DepGraph({\n    circular: false,\n  });\n\n  constructor(\n    rawConfig: PydanticPluginRawConfig,\n    private schema: GraphQLSchema,\n  ) {\n    super(rawConfig, {\n      // enumValues: rawConfig.enumValues || {},\n      // listType: rawConfig.listType || 'List',\n      // package: rawConfig.package || defaultPackageName,\n      scalars: buildScalars(schema, {}, PYTHON_SCALARS),\n    });\n    throw new Error(\"haha\")\n  }\n\n  public getImports(): string {\n    throw new Error(\"haha\")\n    const typing = [];\n    const pydantic = ['BaseModel'];\n    const datetime = [];\n\n    if (this.addAnyImport) {\n      typing.push(`Any`);\n    }\n\n    if (this.addOptionalImport) {\n      typing.push(`Optional`);\n    }\n\n    if (this.addListImport) {\n      typing.push(`List`);\n    }\n\n    if (this.addUnionImport) {\n      typing.push(`Union`);\n    }\n\n    if (this.addFieldImport) {\n      pydantic.push(`Field`);\n    }\n\n    if (this.addDatetimeImport) {\n      datetime.push(`datetime`);\n    }\n\n    const enumInput = this.addEnumImport ? 'from enum import Enum' : '';\n\n    const typingImport = typing.length\n      ? `from typing import ${typing.join(', ')}`\n      : '';\n\n    const pydanticImport = pydantic.length\n      ? `from pydantic import ${pydantic.join(', ')}`\n      : '';\n\n    const datetimeImport = datetime.length\n        ? `from datetime import ${datetime.join(', ')}`\n        : '';\n\n    return [enumInput, typingImport, pydanticImport, datetimeImport].filter(i => i).join('\\n');\n  }\n\n  protected canAddGraphNode(id: string): boolean {\n    if (Object.values(this.scalars).includes(id) || id === 'Any') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected upsertGraphNode(id: string) {\n    if (this.canAddGraphNode(id) && !this.graph.hasNode(id)) {\n      this.graph.addNode(id);\n    }\n  }\n\n  protected addGraphNodeDeps(id: string, ids: string[]) {\n    if (!this.canAddGraphNode(id)) {\n      return;\n    }\n\n    this.upsertGraphNode(id);\n\n    ids.forEach((i: string) => {\n      if (!this.canAddGraphNode(i)) {\n        return;\n      }\n\n      this.upsertGraphNode(i);\n\n      this.graph.addDependency(id, i);\n    });\n  }\n\n  protected clearOptional(str: string): string {\n    if (str.startsWith('Optional[')) {\n      return str.replace(/Optional\\[(.*?)\\]$/, '$1');\n    }\n\n    return str;\n  }\n\n  Name(node: NameNode) {\n    return node.value;\n  }\n\n  NamedType(node: NamedTypeNode) {\n    const { name } = node as any;\n\n    // Scalars\n    if (Object.keys(this.scalars).includes(name)) {\n      const id = this.scalars[name];\n\n      if (id === 'datetime') {\n        this.addDatetimeImport = true;\n      }\n\n      // Special case for any\n      if (id === 'any') {\n        this.addAnyImport = true;\n        return {\n          id: 'Any',\n          source: 'Any',\n        };\n      }\n\n      this.addOptionalImport = true;\n      return {\n        id,\n        source: `Optional[${id}]`,\n      };\n    }\n\n    // Defined\n    this.addOptionalImport = true;\n    return {\n      id: name,\n      source: `Optional[\"${name}\"]`,\n    };\n  }\n\n  ListType(node: ListTypeNode) {\n    this.addListImport = true;\n    this.addOptionalImport = true;\n\n    const { type } = node as any;\n\n    return {\n      id: type.id,\n      source: `Optional[List[${type.source}]]`,\n    };\n  }\n\n  NonNullType(node: NonNullTypeNode) {\n    const { type } = node as any;\n\n    return {\n      id: type.id,\n      source: this.clearOptional(type.source),\n    };\n  }\n\n  protected visitFieldOrInputDefinition(node: any) {\n    const argName = node.name as any;\n\n    const { type, directives } = node as any;\n\n    // @todo handle de-duplicating if snakeCase will break\n    // eg aaaa and AAAA field\n\n    // Handle deprecated\n    const ds = directives.map((d: any) => d.name);\n    if (ds.includes('deprecated')) {\n      return null;\n    }\n\n    // Need to alias some field names\n    // Otherwise pydantic throws\n    if (RESERVED.includes(argName)) {\n      this.addFieldImport = true;\n      return {\n        id: type.id,\n        source: indent(\n          `${argName}_: ${type.source} = Field(None, alias=\"${argName}\")`,\n          2,\n        ),\n      };\n    }\n\n    return {\n      id: type.id,\n      source: indent(`${argName}: ${type.source}`, 2),\n    };\n  }\n\n  FieldDefinition(node: FieldDefinitionNode) {\n    return this.visitFieldOrInputDefinition(node);\n  }\n\n  InputValueDefinition(node: InputValueDefinitionNode) {\n    return this.visitFieldOrInputDefinition(node);\n  }\n\n  EnumTypeDefinition(node: EnumTypeDefinitionNode) {\n    this.addEnumImport = true;\n\n    const { name, values } = node as any;\n\n    const val = values\n      .map((v: any) => indent(`${v.name} = \"${v.name}\"`, 2))\n      .join('\\n');\n    const source = `class ${name}(str, Enum):\\n${val}`;\n\n    this.upsertGraphNode(name);\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  UnionTypeDefinition(node: UnionTypeDefinitionNode) {\n    this.addUnionImport = true;\n\n    const { name, types } = node as any;\n\n    const unionTypes = (types ?? []).map((t: any) =>\n      this.clearOptional(t.source),\n    );\n\n    this.addGraphNodeDeps(\n      name,\n      types.map((t: any) => t.id),\n    );\n\n    return {\n      id: name,\n      source: `${name} = Union[${unionTypes.join(', ')}]`,\n    };\n  }\n\n  InterfaceTypeDefinition(node: InterfaceTypeDefinitionNode) {\n    const { name, fields: rawFields } = node as any;\n\n    const fields = rawFields.filter((f: any) => f);\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const source = `class ${name}(BaseModel):\\n${args}`;\n\n    this.addGraphNodeDeps(\n      name,\n      fields.map((f: any) => f.id),\n    );\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  ObjectTypeDefinition(node: ObjectTypeDefinitionNode) {\n    const { name, fields: rawFields, interfaces: rawInterfaces } = node as any;\n\n    rawFields.push({id: \"int\", source: indent(\"_version: int\", 2)})\n    const fields = rawFields.filter((f: any) => f);\n\n    const interfaces = rawInterfaces.map((n: any) =>\n      this.clearOptional(n.source).replace(/'/g, ''),\n    );\n\n    const impl = interfaces.length ? interfaces.join(', ') : 'BaseModel';\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const methods = indent(\"def __str__(self):\", 2)\n        + \"\\n\"\n        + indent(\"return self.value\", 4);\n    const source = `class ${name}(${impl}):\\n${args}\\n\\n${methods}`;\n\n    if (interfaces.length) {\n      this.addGraphNodeDeps(name, interfaces);\n    } else {\n      this.upsertGraphNode(name);\n    }\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  InputObjectTypeDefinition(node: InputObjectTypeDefinitionNode) {\n    const { name, fields: rawFields } = node as any;\n\n    const fields = rawFields.filter((f: any) => f);\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const source = `class ${name}(BaseModel):\\n${args}`;\n\n    this.upsertGraphNode(name);\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  Document(node: DocumentNode) {\n    const { definitions } = node as any;\n\n    const nodesInOrder = this.graph.overallOrder();\n\n    return nodesInOrder\n      .map((n: any) => definitions.find((d: any) => d.id === n)?.source || '')\n      .join('\\n\\n\\n');\n  }\n}\n","import { parse, GraphQLSchema, printSchema, visit } from 'graphql';\nimport { PluginFunction, Types } from '@graphql-codegen/plugin-helpers';\n\nimport { PydanticVisitor } from './visitor';\nimport { PydanticPluginRawConfig } from './config';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const plugin: PluginFunction<PydanticPluginRawConfig> = async (\n  schema: GraphQLSchema,\n  documents: Types.DocumentFile[],\n  config: PydanticPluginRawConfig,\n  info,\n): Promise<string> => {\n  const visitor = new PydanticVisitor(config, schema);\n  const printedSchema = printSchema(schema);\n  const astNode = parse(printedSchema);\n\n  const visitorResult = visit(astNode, { leave: visitor as any });\n  const imports = visitor.getImports();\n\n  return `${imports}\\n\\n\\n${visitorResult}\\n`;\n};\n"],"names":["PYTHON_SCALARS","ID","String","Boolean","Int","Float","AWSDateTime","PYTHON_RESERVED","PYDANTIC_MODEL_RESERVED","RESERVED","concat","PydanticVisitor","BaseVisitor","constructor","rawConfig","schema","scalars","buildScalars","DepGraph","circular","Error","getImports","canAddGraphNode","id","Object","values","includes","upsertGraphNode","graph","hasNode","addNode","addGraphNodeDeps","ids","forEach","i","addDependency","clearOptional","str","startsWith","replace","Name","node","value","NamedType","name","keys","addDatetimeImport","addAnyImport","source","addOptionalImport","ListType","addListImport","type","NonNullType","visitFieldOrInputDefinition","argName","directives","ds","map","d","addFieldImport","indent","FieldDefinition","InputValueDefinition","EnumTypeDefinition","addEnumImport","val","v","join","UnionTypeDefinition","addUnionImport","types","unionTypes","t","InterfaceTypeDefinition","fields","rawFields","filter","f","args","ObjectTypeDefinition","interfaces","rawInterfaces","push","n","impl","length","methods","InputObjectTypeDefinition","Document","definitions","nodesInOrder","overallOrder","find","plugin","documents","config","info","visitor","printedSchema","printSchema","astNode","parse","visitorResult","visit","leave","imports"],"mappings":"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"}